/AddFoodModal.jsx :

import React from 'react';
import {
  Modal,
  View,
  Text,
  TouchableOpacity,
  TextInput,
  StyleSheet,
  FlatList,
  Platform,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';

export default function AddFoodModal({
  visible,
  onClose,
  searchQuery,
  setSearchQuery,
  filteredFoods,
  addFoodToMeal,
}) {
  return (
    <Modal
      visible={visible}
      animationType="slide"
      transparent
      onRequestClose={onClose}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          {/* Header */}
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Add Food</Text>
            <TouchableOpacity style={styles.closeButton} onPress={onClose}>
              <Ionicons name="close" size={24} color="#000" />
            </TouchableOpacity>
          </View>

          {/* Search Input */}
          <TextInput
            style={styles.searchInput}
            placeholder="Search foods..."
            value={searchQuery}
            onChangeText={setSearchQuery}
            autoFocus
          />

          {/* Food List */}
          <FlatList
            data={filteredFoods}
            keyExtractor={(item) => item.id}
            style={styles.foodList}
            renderItem={({ item }) => (
              <TouchableOpacity
                style={styles.foodListItem}
                onPress={() => addFoodToMeal(item)}
              >
                <View>
                  <Text style={styles.foodListItemName}>{item.name}</Text>
                  <Text style={styles.foodListItemCalories}>
                    {item.calories} kcal / 100g
                  </Text>
                </View>

                <View style={styles.foodListMacros}>
                  <Text style={styles.foodListMacro}>P: {item.protein}g</Text>
                  <Text style={styles.foodListMacro}>C: {item.carbs}g</Text>
                  <Text style={styles.foodListMacro}>F: {item.fats}g</Text>
                </View>
              </TouchableOpacity>
            )}
          />
        </View>
      </View>
    </Modal>
  );
}

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  modalContent: {
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    paddingHorizontal: 20,
    paddingBottom: Platform.OS === 'ios' ? 40 : 20,
    paddingTop: 20,
    maxHeight: '80%',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  closeButton: {
    padding: 5,
  },
  searchInput: {
    backgroundColor: '#F5F5F5',
    borderRadius: 10,
    paddingHorizontal: 15,
    paddingVertical: 10,
    marginBottom: 15,
  },
  foodList: {
    maxHeight: 400,
  },
  foodListItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE',
  },
  foodListItemName: {
    fontSize: 16,
    color: '#333',
  },
  foodListItemCalories: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  foodListMacros: {
    flexDirection: 'row',
  },
  foodListMacro: {
    fontSize: 12,
    color: '#666',
    marginLeft: 8,
  },
});


------------------------

/Header.jsx :

import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  StatusBar,
} from 'react-native';

const Header = ({ title = 'Andrei', subtitle = new Date().toDateString() }) => {
  return (
    <>
      <StatusBar backgroundColor="#581C87" barStyle="light-content" />
      <SafeAreaView style={styles.safeArea}>
        <View style={styles.headerContainer}>
          <Text style={styles.title}>{title}</Text>
          <Text style={styles.subtitle}>{subtitle}</Text>
        </View>
      </SafeAreaView>
    </>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    backgroundColor: '#581C87',
  },
  headerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#581C87',
    paddingVertical: 10,
    paddingHorizontal: 16,
  },
  title: {
    color: '#FFFFFF',
    fontSize: 17,
    fontWeight: '700',
  },
  subtitle: {
    color: '#e3f2fd',
    fontSize: 13,
    fontWeight: '400',
  },
});

export default Header;


------------------------

/MealCard.jsx :

import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function MealCard({ meal, totalCalories, nutrients }) {
  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.mealName}>{meal.name}</Text>
        <Text style={styles.mealTime}>{meal.time}</Text>
        {onDelete && (
            <TouchableOpacity onPress={onDelete} style={{ marginLeft: 8 }}>
              <Ionicons name="trash-outline" size={18} color="#F4607B" />
            </TouchableOpacity>
          )}
      </View>

      <View style={styles.summary}>
        <Text style={styles.items}>
          {meal.foods.length} {meal.foods.length === 1 ? 'item' : 'items'}
        </Text>
        <Text style={styles.calories}>{totalCalories} kcal</Text>
      </View>

      <View style={styles.macrosContainer}>
        <View style={styles.macro}>
          <Text style={styles.macroLabel}>Protein</Text>
          <Text style={styles.macroValue}>{nutrients.protein}g</Text>
        </View>
        <View style={styles.macro}>
          <Text style={styles.macroLabel}>Carbs</Text>
          <Text style={styles.macroValue}>{nutrients.carbs}g</Text>
        </View>
        <View style={styles.macro}>
          <Text style={styles.macroLabel}>Fat</Text>
          <Text style={styles.macroValue}>{nutrients.fat}g</Text>
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#374151',
    borderRadius: 10,
    padding: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.06,
    shadowRadius: 2,
    elevation: 2,
    borderLeftWidth: 3,
    borderLeftColor: '#F97316',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 4,
  },
  mealName: {
    fontSize: 15,
    fontWeight: '600',
    color: '#ffffff',
  },
  mealTime: {
    fontSize: 12,
    color: '#ffffff',
  },
  summary: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 6,
  },
  items: {
    fontSize: 12,
    color: '#ffffff',
  },
  calories: {
    fontSize: 12,
    fontWeight: '500',
    color: '#F4607B',
  },
  macrosContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    backgroundColor: '#374151',
    padding: 8,
    borderRadius: 8,
  },
  macro: {
    alignItems: 'center',
    flex: 1,
  },
  macroLabel: {
    fontSize: 11,
    color: '#ffffff',
    marginBottom: 2,
  },
  macroValue: {
    fontSize: 13,
    fontWeight: '600',
    color: '#ffffff',
  },
});


------------------------

/MealModal.jsx :

import React from 'react';
import {
  Modal,
  View,
  Text,
  TouchableOpacity,
  TextInput,
  StyleSheet,
  Platform,
  ScrollView,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';

export default function MealModal({
  visible,
  selectedMeal,
  isNewMeal,
  newMealName,
  setNewMealName,
  newMealTime,
  setNewMealTime,
  closeMealModal,
  saveMeal,
  startEditingQuantity,
  editingFoodId,
  editingQuantity,
  setEditingQuantity,
  saveQuantity,
  removeFood,
  openAddFoodModal,
}) {
  if (!selectedMeal) return null;

  return (
    <Modal
      visible={visible}
      animationType="slide"
      transparent
      onRequestClose={closeMealModal}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          {/* Header: Meal name & close button */}
          <View style={styles.modalHeader}>
            {isNewMeal ? (
              <TextInput
                style={styles.mealNameInput}
                value={newMealName}
                onChangeText={setNewMealName}
                placeholder="Meal name"
              />
            ) : (
              <Text style={styles.modalTitle}>{selectedMeal.name}</Text>
            )}

            <TouchableOpacity style={styles.closeButton} onPress={closeMealModal}>
              <Ionicons name="close" size={24} color="#000" />
            </TouchableOpacity>
          </View>

          {/* Meal time */}
          <View style={styles.mealTimeContainer}>
            {isNewMeal ? (
              <TextInput
                style={styles.mealTimeInput}
                value={newMealTime}
                onChangeText={setNewMealTime}
                placeholder="Time (e.g., 8:00 AM)"
              />
            ) : (
              <Text style={styles.mealTimeText}>{selectedMeal.time}</Text>
            )}
          </View>

          {/* Foods list */}
          <ScrollView style={{ maxHeight: 300 }}>
            {selectedMeal.foods && selectedMeal.foods.length > 0 ? (
              selectedMeal.foods.map((food) => (
                <View key={food.id} style={styles.foodItem}>
                  <View style={styles.foodInfo}>
                    <Text style={styles.foodName}>{food.name}</Text>
                    <View style={styles.foodNutrients}>
                      <Text style={styles.foodCalories}>{food.calories} Kcal</Text>
                      <Text style={styles.foodNutrient}>P: {food.protein}g</Text>
                      <Text style={styles.foodNutrient}>C: {food.carbs}g</Text>
                      <Text style={styles.foodNutrient}>F: {food.fat}g</Text>
                    </View>
                  </View>

                  <View style={styles.foodActions}>
                    {editingFoodId === food.id ? (
                      <View style={styles.quantityEditContainer}>
                        <TextInput
                          style={styles.quantityInput}
                          value={editingQuantity}
                          onChangeText={setEditingQuantity}
                          keyboardType="numeric"
                          autoFocus
                        />
                        <Text style={styles.unitText}>g</Text>
                        <TouchableOpacity
                          style={styles.saveButton}
                          onPress={() => saveQuantity(selectedMeal.id, food.id)}
                        >
                          <Ionicons name="checkmark" size={20} color="#4CAF50" />
                        </TouchableOpacity>
                      </View>
                    ) : (
                      <TouchableOpacity
                        style={styles.quantityContainer}
                        onPress={() => startEditingQuantity(food.id, food.quantity)}
                      >
                        <Text style={styles.quantityText}>
                          {food.quantity}g
                        </Text>
                        <Ionicons name="create-outline" size={16} color="#2196F3" />
                      </TouchableOpacity>
                    )}

                    <TouchableOpacity
                      style={styles.removeButton}
                      onPress={() => removeFood(selectedMeal.id, food.id)}
                    >
                      <Ionicons name="trash-outline" size={20} color="#FF3B30" />
                    </TouchableOpacity>
                  </View>
                </View>
              ))
            ) : (
              <View style={styles.emptyFoodList}>
                <Text style={styles.emptyFoodListText}>
                  No food items added yet. Add your first item below.
                </Text>
              </View>
            )}
          </ScrollView>

          {/* Action buttons: Add Food, Save Meal */}
          <View style={styles.actionButtonsContainer}>
            <TouchableOpacity style={styles.addFoodButton} onPress={openAddFoodModal}>
              <Ionicons name="add-circle-outline" size={20} color="#FFFFFF" />
              <Text style={styles.addFoodText}>Add Food</Text>
            </TouchableOpacity>

            {isNewMeal && (
              <TouchableOpacity
                style={[
                  styles.saveMealButton,
                  { opacity: selectedMeal.foods.length === 0 ? 0.5 : 1 },
                ]}
                onPress={saveMeal}
                disabled={selectedMeal.foods.length === 0}
              >
                <Ionicons name="checkmark-circle-outline" size={20} color="#FFFFFF" />
                <Text style={styles.saveMealText}>Save Meal</Text>
              </TouchableOpacity>
            )}
          </View>
        </View>
      </View>
    </Modal>
  );
}

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'flex-end',
  },
  modalContent: {
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    paddingHorizontal: 20,
    paddingBottom: Platform.OS === 'ios' ? 40 : 20,
    paddingTop: 20,
    maxHeight: '80%',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    flex: 1,
  },
  mealNameInput: {
    fontSize: 20,
    fontWeight: 'bold',
    borderBottomWidth: 1,
    borderBottomColor: '#ddd',
    paddingBottom: 5,
    color: '#333',
    flex: 1,
  },
  closeButton: {
    padding: 5,
  },
  mealTimeContainer: {
    marginBottom: 15,
  },
  mealTimeInput: {
    fontSize: 14,
    color: '#666',
    borderBottomWidth: 1,
    borderBottomColor: '#ddd',
    paddingBottom: 5,
  },
  mealTimeText: {
    fontSize: 14,
    color: '#666',
  },
  foodItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE',
  },
  foodInfo: {
    flex: 1,
  },
  foodName: {
    fontSize: 16,
    color: '#333',
    marginBottom: 4,
  },
  foodNutrients: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  foodCalories: {
    fontSize: 14,
    color: '#666',
    marginRight: 10,
  },
  foodNutrient: {
    fontSize: 13,
    color: '#777',
    marginRight: 8,
  },
  foodActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  quantityContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F0F0F0',
    borderRadius: 6,
    paddingHorizontal: 10,
    paddingVertical: 5,
    marginRight: 10,
  },
  quantityText: {
    marginRight: 5,
    color: '#333',
  },
  quantityEditContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 10,
  },
  quantityInput: {
    backgroundColor: '#F0F0F0',
    width: 50,
    borderRadius: 6,
    paddingHorizontal: 8,
    paddingVertical: 5,
    textAlign: 'center',
  },
  unitText: {
    marginHorizontal: 5,
    color: '#333',
  },
  saveButton: {
    padding: 5,
  },
  removeButton: {
    padding: 5,
  },
  emptyFoodList: {
    padding: 30,
    alignItems: 'center',
    justifyContent: 'center',
  },
  emptyFoodListText: {
    textAlign: 'center',
    color: '#999',
    fontSize: 14,
  },
  actionButtonsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
  },
  addFoodButton: {
    backgroundColor: '#2196F3',
    borderRadius: 10,
    paddingVertical: 12,
    paddingHorizontal: 16,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    flex: 1,
    marginRight: 10,
  },
  addFoodText: {
    color: '#FFFFFF',
    fontWeight: '600',
    marginLeft: 8,
  },
  saveMealButton: {
    backgroundColor: '#4CAF50',
    borderRadius: 10,
    paddingVertical: 12,
    paddingHorizontal: 16,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    flex: 1,
  },
  saveMealText: {
    color: '#FFFFFF',
    fontWeight: '600',
    marginLeft: 8,
  },
});


------------------------

/MealsList.tsx :

import React from 'react';
import { View, TouchableOpacity } from 'react-native';
import MealCard from './MealCard';

export default function MealsList({
  meals = [],
  onMealPress,
  onMealDelete,
  calculateMealCalories,
  calculateMealNutrients,
  emptyStateComponent,
}) {
  // If no meals, render an optional empty state from parent or a simple fallback
  if (meals.length === 0) {
    return emptyStateComponent || null;
  }

  return (
    <View>
      {meals.map((meal) => {
        const totalCalories = calculateMealCalories(meal.foods);
        const nutrients = calculateMealNutrients(meal.foods);

        return (
          <TouchableOpacity
            key={meal.id}
            style={{ marginBottom: 16 }}
            onPress={() => onMealPress(meal)}
            activeOpacity={0.9}
            onLongPress={() => onMealDelete(meal.id)}
          >
            <MealCard
              meal={meal}
              totalCalories={totalCalories}
              nutrients={nutrients}
              onDelete={() => onMealDelete(meal.id)} 
            />
          </TouchableOpacity>
        );
      })}
    </View>
  );
}


------------------------

/NutritionTracker.jsx :

import React, { useEffect, useRef, useState } from 'react'; // Added useState import
import { View, Text, StyleSheet, Animated } from 'react-native'; // Make sure StyleSheet is imported if styles are defined elsewhere or passed as props
import Svg, { Path, Text as SvgText } from 'react-native-svg';

// ------- Helper Function for Arc Path -------
// (Keep this function as it's essential for LeftArcProgress)
function describeArc(x, y, radius, startAngle, endAngle) {
    const startRad = (startAngle - 90) * Math.PI / 180.0;
    const endRad = (endAngle - 90) * Math.PI / 180.0;

    // Ensure angles are valid numbers, default if not
    const validStartAngle = isNaN(startAngle) ? 0 : startAngle;
    const validEndAngle = isNaN(endAngle) ? 0 : endAngle;

    const angleDiff = validEndAngle - validStartAngle;
    const positiveAngleDiff = (angleDiff % 360 + 360) % 360;

     if (Math.abs(positiveAngleDiff) < 0.01 || Math.abs(positiveAngleDiff - 360) < 0.01 ) {
         return "";
    }

    const largeArcFlag = positiveAngleDiff <= 180 ? "0" : "1";
    const sweepFlag = "1";

    const startX = x + radius * Math.cos(startRad);
    const startY = y + radius * Math.sin(startRad);
    const endX = x + radius * Math.cos(endRad);
    const endY = y + radius * Math.sin(endRad);

    if (isNaN(startX) || isNaN(startY) || isNaN(endX) || isNaN(endY)) {
        console.error("NaN coordinate detected in describeArc", { x, y, radius, startAngle, endAngle, startRad, endRad });
        return "";
    }

    return [
        "M", startX, startY,
        "A", radius, radius, 0, largeArcFlag, sweepFlag, endX, endY
    ].join(" ");
}

const TOTAL_ARC_SWEEP_ANGLE = 180;
const ARC_START_ANGLE = -90;

// ------- LeftArcProgress Component -------
const LeftArcProgress = ({
    value, // Prop can still be potentially non-numeric
    maxValue,
    radius = 80, // Default value using JS destructuring
    strokeWidth = 8,
    activeColor = '#F472B6',
    inactiveColor = '#e8e8e8',
    valueColor = '#ffffff',
    suffixColor = '#ffffff',
    subtitleColor = '#ffffff',
}) => {
    // Ensure numeric values, default to 0
    const numericValue = Number(value) || 0;
    const numericMaxValue = Number(maxValue) || 0;

    const safeMaxValue = numericMaxValue > 0 ? numericMaxValue : 1; // Avoid division by zero
    const percentage = Math.max(0, Math.min(1, numericValue / safeMaxValue)); // Cap percentage

    const animatedProgress = useRef(new Animated.Value(percentage)).current; // Initialize with current percentage

    // Animate when percentage changes
    useEffect(() => {
        Animated.timing(animatedProgress, {
            toValue: percentage,
            duration: 800,
            useNativeDriver: false,
        }).start();
    }, [percentage, animatedProgress]);

    const svgSize = radius * 2 + strokeWidth * 2;
    const center = svgSize / 2;
    const backgroundPath = describeArc(center, center, radius, ARC_START_ANGLE, ARC_START_ANGLE + TOTAL_ARC_SWEEP_ANGLE);
    const valueY = center - 20;
    const subtitleY = center;

    const [progressPath, setProgressPath] = useState(''); // Use React.useState or just useState

    // Listener to update the path string based on animation
    useEffect(() => {
        const listenerId = animatedProgress.addListener(({ value: animatedPercentageValue }) => {
            const currentAngle = ARC_START_ANGLE + Math.min(1, Math.max(0, animatedPercentageValue)) * TOTAL_ARC_SWEEP_ANGLE;
            const clampedAngle = Math.max(ARC_START_ANGLE, Math.min(ARC_START_ANGLE + TOTAL_ARC_SWEEP_ANGLE, currentAngle));
            const path = describeArc(center, center, radius, ARC_START_ANGLE, clampedAngle);
            setProgressPath(path || '');
        });

        // Set initial path correctly
        const initialAngle = ARC_START_ANGLE + Math.min(1, Math.max(0, animatedProgress._value)) * TOTAL_ARC_SWEEP_ANGLE;
        const initialPath = describeArc(center, center, radius, ARC_START_ANGLE, initialAngle);
        setProgressPath(initialPath || '');

        return () => {
            animatedProgress.removeListener(listenerId);
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [animatedProgress]);

    return (
        <View style={{ alignItems: 'center', marginBottom: -60, marginTop: 5 }}>
            <Svg width={svgSize} height={svgSize} viewBox={`0 0 ${svgSize} ${svgSize}`}>
                <Path
                    d={backgroundPath}
                    stroke={inactiveColor}
                    strokeWidth={strokeWidth}
                    strokeLinecap="round"
                    fill="none"
                />
                {progressPath ? (
                    <Path
                        d={progressPath}
                        stroke={activeColor}
                        strokeWidth={strokeWidth}
                        strokeLinecap="round"
                        fill="none"
                    />
                ) : null}
                <SvgText
                    x={center}
                    y={valueY}
                    fill={valueColor}
                    fontSize={28}
                    fontWeight="600"
                    textAnchor="end"
                    alignmentBaseline="middle"
                    dx="5"
                >
                    {Math.round(numericValue)}
                </SvgText>
                <SvgText
                    x={center + 10}
                    y={valueY}
                    fill={suffixColor}
                    fontSize={16}
                    fontWeight="400"
                    textAnchor="start"
                    alignmentBaseline="middle"
                >
                    {` / ${Math.round(numericMaxValue)}`}
                </SvgText>
                <SvgText
                    x={center}
                    y={subtitleY}
                    fill={subtitleColor}
                    fontSize={12}
                    fontWeight="400"
                    textAnchor="middle"
                    alignmentBaseline="middle"
                >
                    Kcals consumed
                </SvgText>
            </Svg>
        </View>
    );
};

// ------- MacroBar Component -------
const MacroBar = ({ label, color, currentValue, maxValue }) => {
    // Ensure numeric values, default to 0
    const numericCurrentValue = Number(currentValue) || 0;
    const numericMaxValue = Number(maxValue) || 0;

    const safeMaxValue = numericMaxValue > 0 ? numericMaxValue : 1;
    const percentage = Math.max(0, Math.min(1, numericCurrentValue / safeMaxValue));

    const animatedWidthPercent = useRef(new Animated.Value(percentage * 100)).current; // Initialize with current percentage

    // Animate when percentage changes
    useEffect(() => {
        Animated.timing(animatedWidthPercent, {
            toValue: percentage * 100,
            duration: 800,
            useNativeDriver: false,
        }).start();
    }, [percentage, animatedWidthPercent]);

    return (
        // Assumes styles.macroBarContainer etc. are defined/imported
        <View style={styles.macroBarContainer}>
            <View style={styles.macroTopRow}>
                <Text style={[styles.macroLabel, { color: color }]}>{label}</Text>
            </View>
            <View style={styles.macroProgressBarBackground}>
                <Animated.View
                    style={[
                        styles.macroProgressBarFill,
                        {
                            backgroundColor: color,
                            width: animatedWidthPercent.interpolate({
                                inputRange: [0, 100],
                                outputRange: ['0%', '100%']
                            })
                        }
                    ]}
                />
            </View>
            <View style={styles.macroBottomRow}>
                <Text style={styles.macroCurrentValue}>{numericCurrentValue.toFixed(1)}g</Text>
                <Text style={styles.macroMaxValue}>{Math.round(numericMaxValue)}g</Text>
            </View>
        </View>
    );
};


// ------- NutritionTracker Component -------
const NutritionTracker = ({
    caloriesConsumed,
    calorieGoal,
    carbsConsumed,
    carbGoal,
    proteinConsumed,
    proteinGoal,
    fatConsumed,
    fatGoal,
}) => {
    // Validate props, default to 0 if invalid input
    const validCaloriesConsumed = Number(caloriesConsumed) || 0;
    const validCalorieGoal = Number(calorieGoal) || 0;
    const validCarbsConsumed = Number(carbsConsumed) || 0;
    const validCarbGoal = Number(carbGoal) || 0;
    const validProteinConsumed = Number(proteinConsumed) || 0;
    const validProteinGoal = Number(proteinGoal) || 0;
    const validFatConsumed = Number(fatConsumed) || 0;
    const validFatGoal = Number(fatGoal) || 0;

    // Pass validated numbers down to child components
    // Assumes styles.card and styles.macrosRow are defined/imported
    return (
        <View style={styles.card}>
            <LeftArcProgress
                value={validCaloriesConsumed}
                maxValue={validCalorieGoal}
                activeColor="#F472B6"
            />
            <View style={styles.macrosRow}>
                <MacroBar label="Carbs" color="#F472B6" currentValue={validCarbsConsumed} maxValue={validCarbGoal} />
                <MacroBar label="Protein" color="#F472B6" currentValue={validProteinConsumed} maxValue={validProteinGoal} />
                <MacroBar label="Fat" color="#F472B6" currentValue={validFatConsumed} maxValue={validFatGoal} />
            </View>
        </View>
    );
};

const styles = StyleSheet.create({
    card: {
        backgroundColor: '#581C87',
        borderBottomEndRadius: 10,
        paddingVertical: 10,
        paddingHorizontal: 14,
    },
    macrosRow: {
        flexDirection: 'row',
        justifyContent: 'space-between',
    },
    macroBarContainer: {
        flex: 1,
        marginHorizontal: 4,
    },
    macroTopRow: {
        flexDirection: 'row',
        justifyContent: 'flex-start',
        alignItems: 'center',
        marginBottom: 4,
        height: 18,
    },
    macroLabel: {
        fontSize: 13,
        fontWeight: '600',
    },
    macroProgressBarBackground: {
        height: 6,
        backgroundColor: '#f0f0f0',
        borderRadius: 5,
        overflow: 'hidden',
        marginBottom: 4,
    },
    macroProgressBarFill: {
        height: '100%',
        borderRadius: 5,
    },
    macroBottomRow: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginTop: 1,
    },
    macroCurrentValue: {
        fontSize: 12,
        fontWeight: '600',
        color: '#ffffff',
    },
    macroMaxValue: {
        fontSize: 12,
        color: '#F472B6',
    },
});

export default NutritionTracker;

------------------------

